[final] 방향 그래프
----------------------------------------------------------
첨부한 코드는 방향 그래프를 구현한 두 개의 클래스 MyMatrixGraph, MyListGraph를 정의하고 이용하는 프로그램이다.
주석을 참고하여 프로그램을 완성하시오.
* 정점 번호의 유효성 검사는 생략함

(1) MyMatrixGraph의 getOutDegree 메소드를 완성 (8점)

(2) MyListGraph의 getOutDegree 메소드를 완성 (2점)

- 실행 예 
final : 홍길동

정점 수 입력: 4
간선 수 입력: 6
6개의 간선을 입력하세요(각 간선은 정점 번호 2개를 whitespace로 구분하여 입력):
1 2  1 3  2 0  2 1  2 3  3 0

graph1
정점 0의 진출차수 = 0
정점 1의 진출차수 = 2
정점 2의 진출차수 = 3
정점 3의 진출차수 = 1

graph2
정점 0의 진출차수 = 0
정점 1의 진출차수 = 2
정점 2의 진출차수 = 3
정점 3의 진출차수 = 1

----------------------------------------------------------
목적
- 그래프 구현을 연습한다.

----------------------------------------------------------
유의사항
- 들여쓰기
- 식별자 이름을 자바 관례에 맞게 적절히 붙일 것
- command-line에서 
  > java -jar course1.jar 
  로 채점합니다. 철자도 똑같게 이 명령이 제대로 실행되어야 합니다.
- 과제코드와 본인의 이름을 맨 처음 출력

----------------------------------------------------------
제출  
- 실행파일: 과제코드.jar 파일 
- 소스코드파일: .java 파일



import java.util.Scanner;

//방향 그래프를 생성하고 이용하는 프로그램
public class GraphTest { 
	public static void main(String[] args) { 
		System.out.println("final : 홍길동\n");

		// 정점 수 n 입력
		Scanner scan = new Scanner(System.in);
		System.out.print("정점 수 입력: ");
		int n = scan.nextInt();

		// 정점 수가 n인 방향 그래프 graph1과 graph2를 생성
		MyMatrixGraph graph1 = new MyMatrixGraph(n);
		MyListGraph graph2 = new MyListGraph(n);

		// 간선 수 e 입력
		System.out.print("간선 수 입력: ");
		int e = scan.nextInt();

		// e개의 간선(정점 쌍)을 입력받아 graph1과 graph2에 삽입
		System.out.println(e + "개의 간선을 입력하세요(각 간선은 정점 번호 2개를 whitespace로 구분하여 입력):");
		for(int i = 0; i < e; i++) {
			int v1 = scan.nextInt();
			int v2 = scan.nextInt();
			graph1.addEdge(v1, v2);
			graph2.addEdge(v1, v2);
		}

		// graph1 각 정점의 out-degree를 출력
		System.out.println("\ngraph1");
		for(int i = 0; i < n; i++) {
			System.out.println("정점 " + i + "의 진출차수 = " + graph1.outDegree(i));		
		}
		
		// graph2 각 정점의 out-degree를 출력
		System.out.println("\ngraph2");
		for(int i = 0; i < n; i++) {
			System.out.println("정점 " + i + "의 진출차수 = " + graph2.outDegree(i));		
		}
	}
}


// 인접행렬을 이용하여 방향 그래프를 구현한 클래스
public class MyMatrixGraph {
	private int[][] matrix;		// 인접 행렬
	private int n;			// 정점 수

	// 정점 0, 1, 2, ..., n-1 인 그래프를 생성
	public MyMatrixGraph(int n) {
		matrix = new int[n][n];
		this.n = n;
	}

	// (1) 정점 v의 진출 차수를 구하여 리턴 (정점 번호 v의 유효성 검사할 필요 없음)
	public int outDegree(int v) {
		











		return -1;	// 메소드 완성 후 삭제할 것
	}

	// 간선 (v1, v2) 를 삽입
	public void addEdge(int v1, int v2) {
		matrix[v1][v2] = 1;
	}
}


//인접리스트를 이용하여 방향 그래프를 구현한 클래스
public class MyListGraph {
	private class Node {
		int vertex;
		Node link;
		Node(int vertex) {
			this.vertex = vertex;
		}
	}
	private Node[] list;	// 인접 리스트
	private int n;		// 정점 수

	// 정점 0, 1, 2, ..., n-1 인 그래프를 생성
	public MyListGraph(int n) {
		list = new Node[n];
		this.n = n;
	}

	// (1) 정점 v의 진출 차수를 구하여 리턴 (정점 번호 v의 유효성 검사할 필요 없음)
	public int outDegree(int v) {
	











	
		return -1;   // 메소드 완성 후 삭제할 것
	}

	// 간선 (v1, v2)를 삽입
	public void addEdge(int v1, int v2) {
		Node newNode = new Node(v2);
		newNode.link = list[v1];
		list[v1] = newNode;
	}
}



